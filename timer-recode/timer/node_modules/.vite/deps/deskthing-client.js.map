{
  "version": 3,
  "sources": ["../../deskthing-client/dist/index.js"],
  "sourcesContent": ["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nexport class DeskThing {\n    /**\n     * Initializes the DeskThing instance and sets up event listeners.\n     * Sends a message to the parent indicating that the client has started.\n     * Also sets up a click event listener for buttons.\n     */\n    constructor() {\n        this.listeners = {};\n        this.initialize();\n        document.addEventListener('keydown', (event) => {\n            const key = event.code;\n            this.sendMessageToParent({ app: 'client', type: 'action', payload: { button: key, flavor: 'Short' } });\n        });\n    }\n    /**\n     * Initializes the message event listener.\n     * @private\n     */\n    initialize() {\n        window.addEventListener('message', this.handleMessage.bind(this));\n    }\n    /**\n     * Singleton pattern: Ensures only one instance of DeskThing exists.\n     * @returns {DeskThing} The single instance of DeskThing\n     *\n     * @example\n     * const deskThing = DeskThing.getInstance();\n     */\n    static getInstance() {\n        if (!this.instance) {\n            this.instance = new DeskThing();\n        }\n        return this.instance;\n    }\n    /**\n     * Registers an event listener for a specific event type.\n     * @param {EventTypes} event - The type of event to listen for\n     * @param {EventCallback} callback - The function to call when the event occurs\n     * @returns {Function} A function to remove the event listener\n     *\n     * @example\n     * const removeListener = deskThing.on('message', (data) => {\n     *   console.log('Received message:', data);\n     * });\n     */\n    on(event, callback) {\n        if (!this.listeners[event]) {\n            this.listeners[event] = [];\n        }\n        if (event === 'apps' || event === 'message' || event === 'music' || event === 'settings') {\n            this.sendMessageToParent({ app: 'client', request: event, type: 'on' });\n            this.listeners[event].push(callback);\n            return () => {\n                this.sendMessageToParent({ app: 'client', request: event, type: 'off' });\n                this.off(event, callback);\n            };\n        }\n        this.listeners[event].push(callback);\n        return () => this.off(event, callback);\n    }\n    /**\n     * Removes an event listener for a specific event type.\n     * @param {EventTypes} event - The type of event to remove the listener from\n     * @param {EventCallback} callback - The function to remove from the listeners\n     *\n     * @example\n     * deskThing.off('message', messageCallback);\n     */\n    off(event, callback) {\n        if (this.listeners[event]) {\n            this.listeners[event] = this.listeners[event].filter(listener => listener !== callback);\n        }\n    }\n    /**\n     * Handles incoming messages from the parent window.\n     * @param {MessageEvent} event - The message event received\n     * @private\n     */\n    handleMessage(event) {\n        // Return if the message is not from the deskthing\n        if (event.data.source !== 'deskthing')\n            return;\n        const socketData = event.data;\n        if (socketData.app === 'client') {\n            if (!socketData.type)\n                return;\n            const callbacks = this.listeners[socketData.type];\n            if (callbacks) {\n                callbacks.forEach(callback => callback(socketData.payload));\n            }\n        }\n        else {\n            this.emit(socketData.app, socketData);\n        }\n    }\n    /**\n     * Emits an event to all registered listeners for that event type.\n     * @param {AppTypes | EventTypes} event - The type of event to emit\n     * @param {SocketData} data - The data to pass to the event listeners\n     * @returns {Promise<void>}\n     * @private\n     */\n    emit(event, data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const callbacks = this.listeners[event];\n            if (callbacks) {\n                callbacks.forEach(callback => callback(data));\n            }\n        });\n    }\n    /**\n     * Sends a message to the parent window.\n     * @param {SocketData} data - The data to send to the parent. \"app\" defaults to the current app\n     *\n     * @example\n     * deskThing.sendMessageToParent({\n     *   app: 'client',\n     *   type: 'action',\n     *   payload: { buttonClicked: 'submit' }\n     * });\n     */\n    sendMessageToParent(data) {\n        const payload = {\n            app: data.app || undefined,\n            type: data.type || undefined,\n            request: data.request || null,\n            payload: data.payload || null\n        };\n        window.parent.postMessage({ type: 'IFRAME_ACTION', payload: payload }, '*');\n    }\n}\nexport default DeskThing.getInstance();\n"],
  "mappings": "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",
  "names": []
}
